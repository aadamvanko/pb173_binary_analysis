# coding=utf8
# the above tag defines encoding for this document and is for Python 2.x compatibility

import re

regex = r"([\"'])(?:(?=(\\?))\2.)*?\1"

test_str = ("\n"
	"    std::cout << decoder.decodeInstructionToStr(\"35 ab cf 00 00\") << std::endl;\n"
	"    std::cout << decoder.decodeInstructionToStr(\"48 35 ab cf 00 00\") << std::endl;\n\n"
	"    std::cout << decoder.decodeInstructionToStr(\"05 ab cf 00 00\") << std::endl;\n"
	"    std::cout << decoder.decodeInstructionToStr(\"48 05 ab cf 00 00\") << std::endl;\n\n"
	"    std::cout << decoder.decodeInstructionToStr(\"48 0f af c0\") << std::endl;\n"
	"    std::cout << decoder.decodeInstructionToStr(\"48 0f af c3\") << std::endl;\n"
	"    std::cout << decoder.decodeInstructionToStr(\"48 0f af c1\") << std::endl;\n"
	"    std::cout << decoder.decodeInstructionToStr(\"48 0f af c2\") << std::endl;\n\n"
	"    std::cout << decoder.decodeInstructionToStr(\"48 0f af d8\") << std::endl;\n"
	"    std::cout << decoder.decodeInstructionToStr(\"48 0f af c8\") << std::endl;\n"
	"    std::cout << decoder.decodeInstructionToStr(\"48 0f af d0\") << std::endl;\n\n"
	"    std::cout << decoder.decodeInstructionToStr(\"48 3d ab 00 00 00\") << std::endl;\n"
	"    std::cout << decoder.decodeInstructionToStr(\"3d ab 00 00 00\") << std::endl;\n\n"
	"    std::cout << decoder.decodeInstructionToStr(\"48 3b c0\") << std::endl;\n"
	"    std::cout << decoder.decodeInstructionToStr(\"48 3b c3\") << std::endl;\n"
	"    std::cout << decoder.decodeInstructionToStr(\"48 3b c1\") << std::endl;\n"
	"    std::cout << decoder.decodeInstructionToStr(\"48 3b c2\") << std::endl;\n\n"
	"    std::cout << decoder.decodeInstructionToStr(\"48 3b d8\") << std::endl;\n"
	"    std::cout << decoder.decodeInstructionToStr(\"48 3b c8\") << std::endl;\n"
	"    std::cout << decoder.decodeInstructionToStr(\"48 3b d0\") << std::endl;\n\n"
	"    std::cout << decoder.decodeInstructionToStr(\"90\") << std::endl;\n\n"
	"    std::cout << decoder.decodeInstructionToStr(\"cc\") << std::endl;\n\n"
	"    std::cout << decoder.decodeInstructionToStr(\"eb ab\") << std::endl;\n"
	"    std::cout << decoder.decodeInstructionToStr(\"e9 ab 00 00 00\") << std::endl;\n\n"
	"    std::cout << decoder.decodeInstructionToStr(\"74 ab\") << std::endl;\n"
	"    std::cout << decoder.decodeInstructionToStr(\"75 ab\") << std::endl;\n"
	"    std::cout << decoder.decodeInstructionToStr(\"72 ab\") << std::endl;\n\n"
	"    std::cout << decoder.decodeInstructionToStr(\"0f 84 ab 00 00 00\") << std::endl;\n"
	"    std::cout << decoder.decodeInstructionToStr(\"0f 85 ab 00 00 00\") << std::endl;\n"
	"    std::cout << decoder.decodeInstructionToStr(\"0f 82 ab 00 00 00\") << std::endl;\n\n"
	"    std::cout << decoder.decodeInstructionToStr(\"c3\") << std::endl;\n"
	"    std::cout << decoder.decodeInstructionToStr(\"c2 00 ab\") << std::endl;\n\n"
	"    std::cout << decoder.decodeInstructionToStr(\"e8 ab 00 00 00\") << std::endl;\n\n"
	"    std::cout << decoder.decodeInstructionToStr(\"58\") << std::endl;\n"
	"    std::cout << decoder.decodeInstructionToStr(\"5b\") << std::endl;\n"
	"    std::cout << decoder.decodeInstructionToStr(\"59\") << std::endl;\n"
	"    std::cout << decoder.decodeInstructionToStr(\"5a\") << std::endl;\n"
	"    std::cout << decoder.decodeInstructionToStr(\"5d\") << std::endl;\n"
	"    std::cout << decoder.decodeInstructionToStr(\"5c\") << std::endl;\n"
	"    std::cout << decoder.decodeInstructionToStr(\"5f\") << std::endl;\n"
	"    std::cout << decoder.decodeInstructionToStr(\"5e\") << std::endl;\n\n"
	"    std::cout << decoder.decodeInstructionToStr(\"8f 00\") << std::endl;\n"
	"    std::cout << decoder.decodeInstructionToStr(\"8f 03\") << std::endl;\n"
	"    std::cout << decoder.decodeInstructionToStr(\"8f 01\") << std::endl;\n"
	"    std::cout << decoder.decodeInstructionToStr(\"8f 02\") << std::endl;\n"
	"    std::cout << decoder.decodeInstructionToStr(\"8f 45 00\") << std::endl;\n"
	"    std::cout << decoder.decodeInstructionToStr(\"8f 45 01\") << std::endl;\n\n"
	"    std::cout << decoder.decodeInstructionToStr(\"8f 80 ab 00 00 00\") << std::endl;\n"
	"    std::cout << decoder.decodeInstructionToStr(\"8f 83 ab 00 00 00\") << std::endl;\n"
	"    std::cout << decoder.decodeInstructionToStr(\"8f 81 ab 00 00 00\") << std::endl;\n"
	"    std::cout << decoder.decodeInstructionToStr(\"8f 82 ab 00 00 00\") << std::endl;\n"
	"    std::cout << decoder.decodeInstructionToStr(\"8f 85 ab 00 00 00\") << std::endl;\n\n"
	"    std::cout << decoder.decodeInstructionToStr(\"8f c0\") << std::endl;\n"
	"    std::cout << decoder.decodeInstructionToStr(\"8f c3\") << std::endl;\n"
	"    std::cout << decoder.decodeInstructionToStr(\"8f c1\") << std::endl;\n"
	"    std::cout << decoder.decodeInstructionToStr(\"8f c2\") << std::endl;\n"
	"    std::cout << decoder.decodeInstructionToStr(\"8f c5\") << std::endl;\n\n"
	"    std::cout << decoder.decodeInstructionToStr(\"8f 05 00 00 00 00\") << std::endl;\n"
	"    std::cout << decoder.decodeInstructionToStr(\"8f 05 00 00 00 01\") << std::endl;\n"
	"    std::cout << decoder.decodeInstructionToStr(\"8f 05 ab 00 00 00\") << std::endl;\n\n"
	"    std::cout << decoder.decodeInstructionToStr(\"8f 04 25 ab 00 00 00\") << std::endl;\n"
	"    std::cout << decoder.decodeInstructionToStr(\"8f 04 25 00 00 00 00\") << std::endl;\n"
	"    std::cout << decoder.decodeInstructionToStr(\"8f 04 24\") << std::endl;\n\n"
	"    std::cout << decoder.decodeInstructionToStr(\"8f 04 25 ab 00 00 00\") << std::endl;\n"
	"    std::cout << decoder.decodeInstructionToStr(\"8f 04 25 00 00 00 00\") << std::endl;\n\n"
	"    // push imm64\n\n"
	"    std::cout << decoder.decodeInstructionToStr(\"68 ab 00 00 00\") << std::endl;\n\n"
	"    // push reg64\n\n"
	"    std::cout << decoder.decodeInstructionToStr(\"50\") << std::endl;\n"
	"    std::cout << decoder.decodeInstructionToStr(\"51\") << std::endl;\n"
	"    std::cout << decoder.decodeInstructionToStr(\"52\") << std::endl;\n"
	"    std::cout << decoder.decodeInstructionToStr(\"53\") << std::endl;\n"
	"    std::cout << decoder.decodeInstructionToStr(\"54\") << std::endl;\n"
	"    std::cout << decoder.decodeInstructionToStr(\"55\") << std::endl;\n"
	"    std::cout << decoder.decodeInstructionToStr(\"56\") << std::endl;\n"
	"    std::cout << decoder.decodeInstructionToStr(\"57\") << std::endl;\n\n"
	"    // push reg/mem64\n\n"
	"    std::cout << decoder.decodeInstructionToStr(\"ff b0 ab 00 00 00\") << std::endl;\n"
	"    std::cout << decoder.decodeInstructionToStr(\"ff b3 ab 00 00 00\") << std::endl;\n"
	"    std::cout << decoder.decodeInstructionToStr(\"ff b1 ab 00 00 00\") << std::endl;\n"
	"    std::cout << decoder.decodeInstructionToStr(\"ff b2 ab 00 00 00\") << std::endl;\n\n"
	"    std::cout << decoder.decodeInstructionToStr(\"ff 75 00\") << std::endl;\n"
	"    std::cout << decoder.decodeInstructionToStr(\"ff 75 01\") << std::endl;\n"
	"    std::cout << decoder.decodeInstructionToStr(\"ff b5 ab 00 00 00\") << std::endl;\n\n"
	"    std::cout << decoder.decodeInstructionToStr(\"ff 35 00 00 00 00\") << std::endl;\n"
	"    std::cout << decoder.decodeInstructionToStr(\"ff 35 01 00 00 00\") << std::endl;\n"
	"    std::cout << decoder.decodeInstructionToStr(\"ff 34 25 00 00 00 00\") << std::endl;\n"
	"    std::cout << decoder.decodeInstructionToStr(\"ff 34 25 ab cd ef 00\") << std::endl;\n\n"
	"    std::cout << decoder.decodeInstructionToStr(\"ff 30\") << std::endl;\n"
	"    std::cout << decoder.decodeInstructionToStr(\"ff 33\") << std::endl;\n"
	"    std::cout << decoder.decodeInstructionToStr(\"ff 31\") << std::endl;\n"
	"    std::cout << decoder.decodeInstructionToStr(\"ff 32\") << std::endl;\n"
	"    std::cout << decoder.decodeInstructionToStr(\"ff 35 00 00 00 00\") << std::endl;\n"
	"    std::cout << decoder.decodeInstructionToStr(\"ff 34 24\") << std::endl;\n"
	"    std::cout << decoder.decodeInstructionToStr(\"ff 75 00\") << std::endl;\n"
	"    std::cout << decoder.decodeInstructionToStr(\"ff 36\") << std::endl;\n"
	"    std::cout << decoder.decodeInstructionToStr(\"ff 37\") << std::endl;\n\n"
	"    std::cout << decoder.decodeInstructionToStr(\"ff 34 25 ab cd ef 00\") << std::endl;\n\n"
	"    // mov\n"
	"    std::cout << decoder.decodeInstructionToStr(\"48 89 c0\") << std::endl;\n"
	"    std::cout << decoder.decodeInstructionToStr(\"48 89 c3\") << std::endl;\n"
	"    std::cout << decoder.decodeInstructionToStr(\"48 89 c1\") << std::endl;\n"
	"    std::cout << decoder.decodeInstructionToStr(\"48 89 c2\") << std::endl;\n"
	"    std::cout << decoder.decodeInstructionToStr(\"48 89 d8\") << std::endl;\n"
	"    std::cout << decoder.decodeInstructionToStr(\"48 89 c8\") << std::endl;\n"
	"    std::cout << decoder.decodeInstructionToStr(\"48 89 d0\") << std::endl;\n\n"
	"    std::cout << decoder.decodeInstructionToStr(\"48 8b 00\") << std::endl;\n"
	"    std::cout << decoder.decodeInstructionToStr(\"48 8b 18\") << std::endl;\n"
	"    std::cout << decoder.decodeInstructionToStr(\"48 8b 08\") << std::endl;\n"
	"    std::cout << decoder.decodeInstructionToStr(\"48 8b 10\") << std::endl;\n\n"
	"    std::cout << decoder.decodeInstructionToStr(\"48 89 00\") << std::endl;\n"
	"    std::cout << decoder.decodeInstructionToStr(\"48 89 03\") << std::endl;\n"
	"    std::cout << decoder.decodeInstructionToStr(\"48 89 01\") << std::endl;\n"
	"    std::cout << decoder.decodeInstructionToStr(\"48 89 02\") << std::endl;\n\n"
	"    std::cout << decoder.decodeInstructionToStr(\"48 89 05 ab 00 00 00\") << std::endl;\n"
	"    std::cout << decoder.decodeInstructionToStr(\"48 89 85 ab 00 00 00\") << std::endl;\n"
	"    std::cout << decoder.decodeInstructionToStr(\"48 89 1d ab 00 00 00\") << std::endl;\n"
	"    std::cout << decoder.decodeInstructionToStr(\"48 89 9d ab 00 00 00\") << std::endl;\n"
	"    std::cout << decoder.decodeInstructionToStr(\"48 8b 05 ab 00 00 00\") << std::endl;\n"
	"    std::cout << decoder.decodeInstructionToStr(\"48 8b 85 ab 00 00 00\") << std::endl;\n"
	"    std::cout << decoder.decodeInstructionToStr(\"48 8b 1d ab 00 00 00\") << std::endl;\n"
	"    std::cout << decoder.decodeInstructionToStr(\"48 8b 9d ab 00 00 00\") << std::endl;")

matches = re.finditer(regex, test_str, re.MULTILINE)

res = []
for matchNum, match in enumerate(matches, start=1):
    
    #print ("Match {matchNum} was found at {start}-{end}: {match}".format(matchNum = matchNum, start = match.start(), end = match.end(), match = match.group()))
    res.append(match.group()[1:-1])
    
    for groupNum in range(0, len(match.groups())):
        groupNum = groupNum + 1
        
        #print ("Group {groupNum} found at {start}-{end}: {group}".format(groupNum = groupNum, start = match.start(groupNum), end = match.end(groupNum), group = match.group(groupNum)))
print(res)
print(" ".join(res))
# Note: for Python 2.7 compatibility, use ur"" to prefix the regex and u"" to prefix the test string and substitution.
